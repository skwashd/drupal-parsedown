<?php

/**
 * @file
 * Define functions to create and use the paresdown filter
 */

/**
 * Implements hook_filter_info().
 *
 * Return the parsedown filter.
 */
function parsedown_filter_info() {
  $filters = array();

  $filters['parsedown'] = array(
    'title' => t('Parsedown'),
    'description' => t('Make more out of your text with markdown.'),
    'tips callback' => 'parsedown_filter_tips',
    'process callback' => 'parsedown_filter_process',
  );

  return $filters;
}


/**
 * Return the filter tip text.
 *
 * @param $filter object
 *   An object representing the filter.
 * @param $format objec
 *   An object representing the text format the filter is contained in.
 * @param $long bool
 *   Whether this callback should return a short tip to display in a form (FALSE), or whether a more elaborate filter tips should be returned for theme_filter_tips() (TRUE).
 *
 * @return string
 *   Translated text to display as a tip.
 */
function parsedown_filter_tips($filter, $format, $long) {
  return t('Enter your text with <a href="@markdown">Markdown</a> styling. It will be automatically parsed into HTML and also supports <a href="@gfm">Github Flavoured Markdown</a>', array(
    '@markdown' => 'http://daringfireball.net/projects/markdown/syntax',
    '@gfm' => 'https://help.github.com/articles/github-flavored-markdown',
  ));
}

/**
 * Process the text to filter with 'Parsedown' if itÂ´s available.
 *
 * @param $text string
 *   The text string to be filtered.
 * @param $filter object
 *   The filter object containing settings for the given format.
 * @param $format object
 *   The text format object assigned to the text to be filtered.
 * @param $langcode object
 *   The language code of the text to be filtered.
 * @param $cache bool
 *   A Boolean indicating whether the filtered text is going to be cached in {cache_filter}.
 * @param $cache_id integer
 *   The ID of the filtered text in {cache_filter}, if $cache is TRUE.
 *
 * @return string
 *   The filtered text.
 */
function parsedown_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if(_parsedown_require_parsedown()) {
    $Parsedown = new Parsedown();
    return $Parsedown->text($text);
  } else {
    return $text;
  }
}

/**
 * Check if the class file exists.
 *
 * @return bool
 *   TRUE if the file exists.
 */
function _parsedown_class_exists() {
  return file_exists(drupal_get_path('module', 'parsedown') . '/parsedown/Parsedown.php');
}

/**
 * Include the class file if it exists.
 *
 * @return bool
 *   TRUE if the file exists and was included.
 */
function _parsedown_require_parsedown() {
  return _parsedown_class_exists() && require_once drupal_get_path('module', 'parsedown') . '/parsedown/Parsedown.php';
}
